#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Display HSS Compression Design Results in Text Format"""

import os
import sys
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'examples'))

from rectangular_hss_compression_design_si import rectangular_hss_compression_design_si
from efficalc.report_builder import ReportBuilder

def show_calculation_summary():
    """Show a summary of the HSS compression design calculation"""
    
    print("üèóÔ∏è  RECTANGULAR HSS COMPRESSION DESIGN (SI UNITS)")
    print("=" * 70)
    print()
    
    print("üìã INPUT PARAMETERS:")
    print("   ‚Ä¢ Ultimate Load (Pu):        45 kN")
    print("   ‚Ä¢ Member Length (L):         1.2 m") 
    print("   ‚Ä¢ Effective Length Factor:   1.0")
    print("   ‚Ä¢ Section Width (b):         152 mm")
    print("   ‚Ä¢ Section Height (h):        51 mm")
    print("   ‚Ä¢ Wall Thickness (t):        3.2 mm")
    print("   ‚Ä¢ Yield Stress (Fy):         248 MPa")
    print("   ‚Ä¢ Elastic Modulus (E):       200,000 MPa")
    print("   ‚Ä¢ Resistance Factor (œÜc):    0.9")
    print()
    
    print("üîß SECTION PROPERTIES:")
    # Manual calculations to show results
    b, h, t = 152, 51, 3.2
    Ag = (b * h - (b - 2*t) * (h - 2*t))  # mm¬≤
    
    Ix = (b * h**3 - (b - 2*t) * (h - 2*t)**3) / 12  # mm‚Å¥
    Iy = (h * b**3 - (h - 2*t) * (b - 2*t)**3) / 12  # mm‚Å¥
    
    rx = (Ix / Ag) ** 0.5  # mm
    ry = (Iy / Ag) ** 0.5  # mm
    
    print(f"   ‚Ä¢ Gross Area (Ag):           {Ag:.1f} mm¬≤")
    print(f"   ‚Ä¢ Moment of Inertia (Ix):    {Ix:.0f} mm‚Å¥")
    print(f"   ‚Ä¢ Moment of Inertia (Iy):    {Iy:.0f} mm‚Å¥")
    print(f"   ‚Ä¢ Radius of Gyration (rx):   {rx:.1f} mm")
    print(f"   ‚Ä¢ Radius of Gyration (ry):   {ry:.1f} mm")
    print()
    
    print("üìê SLENDERNESS RATIOS:")
    b_t = (b - 2*t) / (2*t)
    h_t = (h - 2*t) / (2*t)
    KLr = 1.0 * 1.2 * 1000 / min(rx, ry)  # dimensionless
    
    print(f"   ‚Ä¢ Width-to-thickness (b/t):  {b_t:.1f}")
    print(f"   ‚Ä¢ Height-to-thickness (h/t): {h_t:.1f}")
    print(f"   ‚Ä¢ Member slenderness (KL/r): {KLr:.1f}")
    print()
    
    print("üîç BUCKLING ANALYSIS:")
    Es, Fy = 200000, 248
    yr = 1.40 * (Es / Fy) ** 0.5  # Element slenderness limit
    y_max = max(b_t, h_t)
    
    print(f"   ‚Ä¢ Element slenderness limit (Œªr): {yr:.1f}")
    print(f"   ‚Ä¢ Maximum element slenderness:     {y_max:.1f}")
    
    if y_max < yr:
        print("   ‚Ä¢ Section classification:          Non-Slender ‚úÖ")
        
        y_crit = 4.71 * (Es / Fy) ** 0.5
        print(f"   ‚Ä¢ Critical slenderness (Œªcrit):    {y_crit:.1f}")
        
        Fe = 3.14159**2 * Es / KLr**2
        print(f"   ‚Ä¢ Elastic buckling stress (Fe):   {Fe:.1f} MPa")
        
        if KLr <= y_crit:
            print("   ‚Ä¢ Buckling mode:                   Inelastic")
            Fcr = Fy * 0.658 ** (Fy / Fe)
        else:
            print("   ‚Ä¢ Buckling mode:                   Elastic")
            Fcr = 0.877 * Fe
            
        print(f"   ‚Ä¢ Critical stress (Fcr):           {Fcr:.1f} MPa")
    else:
        print("   ‚Ä¢ Section classification:          Slender ‚ö†Ô∏è")
        Fcr = 0.6 * Fy  # Conservative
        print(f"   ‚Ä¢ Conservative critical stress:    {Fcr:.1f} MPa")
    
    print()
    
    print("üí™ CAPACITY RESULTS:")
    Pn = Fcr * Ag / 1000  # kN
    Pc = 0.9
    PPn = Pc * Pn  # kN
    
    print(f"   ‚Ä¢ Nominal strength (Pn):      {Pn:.1f} kN")
    print(f"   ‚Ä¢ Design capacity (œÜPn):      {PPn:.1f} kN")
    print(f"   ‚Ä¢ Applied load (Pu):          45.0 kN")
    print()
    
    print("‚úÖ DESIGN CHECK:")
    if 45.0 <= PPn:
        print(f"   ‚Ä¢ Demand/Capacity ratio:      {45.0/PPn:.3f}")
        print("   ‚Ä¢ Result:                     PASS ‚úÖ")
        print("   ‚Ä¢ The member is adequate for the applied load")
    else:
        print(f"   ‚Ä¢ Demand/Capacity ratio:      {45.0/PPn:.3f}")
        print("   ‚Ä¢ Result:                     FAIL ‚ùå") 
        print("   ‚Ä¢ The member is NOT adequate - increase size")
    
    print()
    print("=" * 70)

if __name__ == "__main__":
    try:
        show_calculation_summary()
        print()
        print("üåê Opening detailed HTML report in browser...")
        
        # Generate and open HTML report
        builder = ReportBuilder(rectangular_hss_compression_design_si)
        builder.view_report()
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
